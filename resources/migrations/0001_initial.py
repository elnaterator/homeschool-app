# Generated by Django 5.1.6 on 2025-03-09 02:21

import django.contrib.postgres.search
import django.db.models.deletion
from django.db import migrations, models


def create_search_trigger(apps, schema_editor):
    resources_table = apps.get_model("resources", "Resource")._meta.db_table
    provider_table = apps.get_model("resources", "Provider")._meta.db_table
    schema_editor.execute(f"""
        DROP TRIGGER IF EXISTS search_text_update ON {resources_table};
        DROP FUNCTION IF EXISTS update_search_text;
                          
        CREATE FUNCTION update_search_text() RETURNS trigger AS $$
        BEGIN
            NEW.search_text := 
                setweight(to_tsvector('english', NEW.title), 'A') || 
                setweight(to_tsvector('english', COALESCE(NEW.resource_type, '')), 'B') || 
                setweight(to_tsvector('english', COALESCE(NEW.description, '')), 'C') ||
                setweight(to_tsvector('english', COALESCE((
                    SELECT string_agg(t.name, ' ') 
                    FROM resources_tag t
                    JOIN resources_resource_tags rt ON rt.tag_id = t.id
                    WHERE rt.resource_id = NEW.resource_id
                ), '')), 'D') ||
                setweight(to_tsvector('english', COALESCE((
                    SELECT CONCAT_WS(' ', name, description, link) 
                    FROM resources_provider 
                    WHERE id = NEW.provider_id
                ), '')), 'D') ||
                setweight(to_tsvector('english', COALESCE(NEW.link, '')), 'D');
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;

        CREATE TRIGGER search_text_update BEFORE INSERT OR UPDATE
        ON {resources_table} FOR EACH ROW EXECUTE FUNCTION update_search_text();
    """)

def drop_search_trigger(apps, schema_editor):
    resources_table = apps.get_model("resources", "Resource")._meta.db_table
    schema_editor.execute(f"""
        DROP TRIGGER IF EXISTS search_text_update ON {resources_table};
        DROP FUNCTION IF EXISTS update_search_text;
    """)

class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('link', models.URLField()),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('resource_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('link', models.URLField()),
                ('favorited_count', models.IntegerField(default=0)),
                ('search_text', django.contrib.postgres.search.SearchVectorField(editable=False)),
                ('resource_type', models.CharField(choices=[('community', 'Community'), ('video', 'Video'), ('book', 'Book'), ('course', 'Course'), ('homeschool_coop', 'Homeschool Co-op'), ('online_course', 'Online Course'), ('field_trip', 'Field Trip'), ('app', 'App'), ('website', 'Website'), ('program', 'Program'), ('other', 'Other')], default='other', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='resources.provider')),
                ('tags', models.ManyToManyField(related_name='resources', to='resources.tag')),
            ],
        ),
        migrations.RunPython(create_search_trigger, reverse_code=drop_search_trigger),
    ]
